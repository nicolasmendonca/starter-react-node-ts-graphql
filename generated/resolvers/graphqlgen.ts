// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Restaurant } from "../prisma-client";
import { Context } from "../../src/context";

export namespace RestaurantResolvers {
  export const defaultResolvers = {
    id: (parent: Restaurant) => parent.id,
    name: (parent: Restaurant) => parent.name,
    image: (parent: Restaurant) =>
      parent.image === undefined ? null : parent.image
  };

  export type IdResolver =
    | ((
        parent: Restaurant,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type NameResolver =
    | ((
        parent: Restaurant,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ImageResolver =
    | ((
        parent: Restaurant,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Restaurant,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    name:
      | ((
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Restaurant,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    image:
      | ((
          parent: Restaurant,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Restaurant,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsRestaurant {
    id: number;
  }

  export type RestaurantResolver =
    | ((
        parent: undefined,
        args: ArgsRestaurant,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Restaurant | Promise<Restaurant>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRestaurant,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Restaurant | Promise<Restaurant>;
      };

  export type RestaurantsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Restaurant[] | Promise<Restaurant[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Restaurant[] | Promise<Restaurant[]>;
      };

  export interface Type {
    restaurant:
      | ((
          parent: undefined,
          args: ArgsRestaurant,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Restaurant | Promise<Restaurant>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRestaurant,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Restaurant | Promise<Restaurant>;
        };

    restaurants:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Restaurant[] | Promise<Restaurant[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Restaurant[] | Promise<Restaurant[]>;
        };
  }
}

export interface Resolvers {
  Restaurant: RestaurantResolvers.Type;
  Query: QueryResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
